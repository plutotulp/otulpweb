#+TITLE: www.otulp.net
#+OPTIONS: ^:{} toc:nil
#+LANGUAGE: en

* Overview
  Server and client code for the www.otulp.net web site.

  Client in this case basically means the web site contents. The idea
  is that the server supplies the client code at the root path, and
  otherwise acts as an API server for the client.

* Prerequisites
  - Nix :: Get it at https://nixos.org
  - Cachix :: An binary cache (https://cachix.org) that lets us avoid
    compiling GHCJS from scratch (or, as is usually the case: try to
    compile and run out of memory).
  - GNU make :: The build tool that was too simplistic, twisted into
    something that still doesn't fit modern demands.

  Well, nix can of course provide the latter two.

* Build
  Enable =miso= =cachix= cache. This is not a strict requirement, it
  just speeds up initial builds.

  #+begin_src shell
    cachix use miso
  #+end_src

  Build a =server= deployment in the =build= directory, using =nix=.
  This includes building the client.

  #+begin_src shell
    make
  #+end_src

* Development builds
  During client development, it is sure nice to be able to iterate a
  bit faster than GHCJS allows for. The =SOMETHING-dev-ghcid= PHONY
  targes run a ghcid session with the normal GHC compiler and hlint.
  This makes it possible to verify that code compiles, quickly
  recompiling when code changes.

  In addition, a =-server= suffix on the dev build target includes
  running the (unoptimized) code in a dev server at
  http://0.0.0.0:8080.

  For =otulpweb-client=, this actually means running all the
  would-be-javascript logic server-side on the dev server and sending
  UI updates to the browser. It makes the edit-compile-run cycle short
  and sweet, but doesn't work at all with Firefox and sometimes wigs
  out a bit.

  For =otulpweb-server=, this means serving whatever is at
  =build/otulpweb-deployment.nix-result/static= as the client.

  #+begin_src shell
    # Work on client code, just looking for compiler/linting messages.
    make webclient-ghcid

    # Work on client code, trying to see what happens when the code runs.
    make webclient-ghcid-server

    # Work on common code.
    make common-ghcid

    # Work on common code tests.
    make common-ghcid-tasty
  #+end_src

* Tasks remaining [0/2]

** TODO Database library
   Somme Contenders:
   - hasql :: Nikita Volkov. Claims to be fast. I *think* it comes
     with migrations support. Supports only Postgresql, I think.
   - beam :: Looks fancy. Supports multiple primary keys, yey!
     Migrations. Seems a bit like the esqelito (or whatever it's
     called), but more capable? Supports Sqlite and Postresql, maybe
     more. Has [[https://haskell-beam.github.io/beam/][nice docs]]!
   - persistent :: Popular, I think? Weird primary key demands, I seem
     to recall. I think there's some migration strategy. Pairs with
     esqueleto (or whatever it's called) for typed queries, but I
     remember these becoming unwieldy. Supports at least Sqlite and
     Postgres, maybe more.

** TODO Data dir
   Should probably make default.nix' otulpweb-service setup a var
   directory as well, and put a sqlite db there. Or maybe use
   postgresql. Either, way, storage is next.

** TODO Authentication?
   This can probably wait. For the Meter app, I could perhaps extract
   a unique ID from your web client / phone and just key data by that?
   Or you choose your own username, and we keep it in the browser's
   local storage as long as possible? Could just make sure to store
   enough metadata along with the metrics to possibly filter out any
   rogue data afterwards. Key thing for Meter: must be super easy to
   register metrics!
